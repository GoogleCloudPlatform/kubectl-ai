// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/GoogleCloudPlatform/kubectl-ai/gollm (interfaces: Client,Chat,CompletionResponse,ChatResponse,Candidate,Part)
//
// Generated by this command:
//
//	mockgen -destination internal/mock_gollm/mock_gollm.go github.com/GoogleCloudPlatform/kubectl-ai/gollm Client,Chat,CompletionResponse,ChatResponse,Candidate,Part
//

// Package mock_gollm is a generated GoMock package.
package mock_gollm

import (
	context "context"
	reflect "reflect"

	gollm "github.com/GoogleCloudPlatform/kubectl-ai/gollm"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClient)(nil).Close))
}

// GenerateCompletion mocks base method.
func (m *MockClient) GenerateCompletion(ctx context.Context, req *gollm.CompletionRequest) (gollm.CompletionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateCompletion", ctx, req)
	ret0, _ := ret[0].(gollm.CompletionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateCompletion indicates an expected call of GenerateCompletion.
func (mr *MockClientMockRecorder) GenerateCompletion(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateCompletion", reflect.TypeOf((*MockClient)(nil).GenerateCompletion), ctx, req)
}

// ListModels mocks base method.
func (m *MockClient) ListModels(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListModels", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListModels indicates an expected call of ListModels.
func (mr *MockClientMockRecorder) ListModels(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListModels", reflect.TypeOf((*MockClient)(nil).ListModels), ctx)
}

// SetResponseSchema mocks base method.
func (m *MockClient) SetResponseSchema(schema *gollm.Schema) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetResponseSchema", schema)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetResponseSchema indicates an expected call of SetResponseSchema.
func (mr *MockClientMockRecorder) SetResponseSchema(schema any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetResponseSchema", reflect.TypeOf((*MockClient)(nil).SetResponseSchema), schema)
}

// StartChat mocks base method.
func (m *MockClient) StartChat(systemPrompt, model string) gollm.Chat {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartChat", systemPrompt, model)
	ret0, _ := ret[0].(gollm.Chat)
	return ret0
}

// StartChat indicates an expected call of StartChat.
func (mr *MockClientMockRecorder) StartChat(systemPrompt, model any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartChat", reflect.TypeOf((*MockClient)(nil).StartChat), systemPrompt, model)
}

// MockChat is a mock of Chat interface.
type MockChat struct {
	ctrl     *gomock.Controller
	recorder *MockChatMockRecorder
	isgomock struct{}
}

// MockChatMockRecorder is the mock recorder for MockChat.
type MockChatMockRecorder struct {
	mock *MockChat
}

// NewMockChat creates a new mock instance.
func NewMockChat(ctrl *gomock.Controller) *MockChat {
	mock := &MockChat{ctrl: ctrl}
	mock.recorder = &MockChatMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChat) EXPECT() *MockChatMockRecorder {
	return m.recorder
}

// IsRetryableError mocks base method.
func (m *MockChat) IsRetryableError(arg0 error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRetryableError", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsRetryableError indicates an expected call of IsRetryableError.
func (mr *MockChatMockRecorder) IsRetryableError(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRetryableError", reflect.TypeOf((*MockChat)(nil).IsRetryableError), arg0)
}

// Send mocks base method.
func (m *MockChat) Send(ctx context.Context, contents ...any) (gollm.ChatResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range contents {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Send", varargs...)
	ret0, _ := ret[0].(gollm.ChatResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send.
func (mr *MockChatMockRecorder) Send(ctx any, contents ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, contents...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockChat)(nil).Send), varargs...)
}

// SendStreaming mocks base method.
func (m *MockChat) SendStreaming(ctx context.Context, contents ...any) (gollm.ChatResponseIterator, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range contents {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendStreaming", varargs...)
	ret0, _ := ret[0].(gollm.ChatResponseIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendStreaming indicates an expected call of SendStreaming.
func (mr *MockChatMockRecorder) SendStreaming(ctx any, contents ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, contents...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendStreaming", reflect.TypeOf((*MockChat)(nil).SendStreaming), varargs...)
}

// SetFunctionDefinitions mocks base method.
func (m *MockChat) SetFunctionDefinitions(functionDefinitions []*gollm.FunctionDefinition) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFunctionDefinitions", functionDefinitions)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFunctionDefinitions indicates an expected call of SetFunctionDefinitions.
func (mr *MockChatMockRecorder) SetFunctionDefinitions(functionDefinitions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFunctionDefinitions", reflect.TypeOf((*MockChat)(nil).SetFunctionDefinitions), functionDefinitions)
}

// MockCompletionResponse is a mock of CompletionResponse interface.
type MockCompletionResponse struct {
	ctrl     *gomock.Controller
	recorder *MockCompletionResponseMockRecorder
	isgomock struct{}
}

// MockCompletionResponseMockRecorder is the mock recorder for MockCompletionResponse.
type MockCompletionResponseMockRecorder struct {
	mock *MockCompletionResponse
}

// NewMockCompletionResponse creates a new mock instance.
func NewMockCompletionResponse(ctrl *gomock.Controller) *MockCompletionResponse {
	mock := &MockCompletionResponse{ctrl: ctrl}
	mock.recorder = &MockCompletionResponseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompletionResponse) EXPECT() *MockCompletionResponseMockRecorder {
	return m.recorder
}

// Response mocks base method.
func (m *MockCompletionResponse) Response() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Response")
	ret0, _ := ret[0].(string)
	return ret0
}

// Response indicates an expected call of Response.
func (mr *MockCompletionResponseMockRecorder) Response() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Response", reflect.TypeOf((*MockCompletionResponse)(nil).Response))
}

// UsageMetadata mocks base method.
func (m *MockCompletionResponse) UsageMetadata() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsageMetadata")
	ret0, _ := ret[0].(any)
	return ret0
}

// UsageMetadata indicates an expected call of UsageMetadata.
func (mr *MockCompletionResponseMockRecorder) UsageMetadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsageMetadata", reflect.TypeOf((*MockCompletionResponse)(nil).UsageMetadata))
}

// MockChatResponse is a mock of ChatResponse interface.
type MockChatResponse struct {
	ctrl     *gomock.Controller
	recorder *MockChatResponseMockRecorder
	isgomock struct{}
}

// MockChatResponseMockRecorder is the mock recorder for MockChatResponse.
type MockChatResponseMockRecorder struct {
	mock *MockChatResponse
}

// NewMockChatResponse creates a new mock instance.
func NewMockChatResponse(ctrl *gomock.Controller) *MockChatResponse {
	mock := &MockChatResponse{ctrl: ctrl}
	mock.recorder = &MockChatResponseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatResponse) EXPECT() *MockChatResponseMockRecorder {
	return m.recorder
}

// Candidates mocks base method.
func (m *MockChatResponse) Candidates() []gollm.Candidate {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Candidates")
	ret0, _ := ret[0].([]gollm.Candidate)
	return ret0
}

// Candidates indicates an expected call of Candidates.
func (mr *MockChatResponseMockRecorder) Candidates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Candidates", reflect.TypeOf((*MockChatResponse)(nil).Candidates))
}

// UsageMetadata mocks base method.
func (m *MockChatResponse) UsageMetadata() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsageMetadata")
	ret0, _ := ret[0].(any)
	return ret0
}

// UsageMetadata indicates an expected call of UsageMetadata.
func (mr *MockChatResponseMockRecorder) UsageMetadata() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsageMetadata", reflect.TypeOf((*MockChatResponse)(nil).UsageMetadata))
}

// MockCandidate is a mock of Candidate interface.
type MockCandidate struct {
	ctrl     *gomock.Controller
	recorder *MockCandidateMockRecorder
	isgomock struct{}
}

// MockCandidateMockRecorder is the mock recorder for MockCandidate.
type MockCandidateMockRecorder struct {
	mock *MockCandidate
}

// NewMockCandidate creates a new mock instance.
func NewMockCandidate(ctrl *gomock.Controller) *MockCandidate {
	mock := &MockCandidate{ctrl: ctrl}
	mock.recorder = &MockCandidateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCandidate) EXPECT() *MockCandidateMockRecorder {
	return m.recorder
}

// Parts mocks base method.
func (m *MockCandidate) Parts() []gollm.Part {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parts")
	ret0, _ := ret[0].([]gollm.Part)
	return ret0
}

// Parts indicates an expected call of Parts.
func (mr *MockCandidateMockRecorder) Parts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parts", reflect.TypeOf((*MockCandidate)(nil).Parts))
}

// String mocks base method.
func (m *MockCandidate) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockCandidateMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockCandidate)(nil).String))
}

// MockPart is a mock of Part interface.
type MockPart struct {
	ctrl     *gomock.Controller
	recorder *MockPartMockRecorder
	isgomock struct{}
}

// MockPartMockRecorder is the mock recorder for MockPart.
type MockPartMockRecorder struct {
	mock *MockPart
}

// NewMockPart creates a new mock instance.
func NewMockPart(ctrl *gomock.Controller) *MockPart {
	mock := &MockPart{ctrl: ctrl}
	mock.recorder = &MockPartMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPart) EXPECT() *MockPartMockRecorder {
	return m.recorder
}

// AsFunctionCalls mocks base method.
func (m *MockPart) AsFunctionCalls() ([]gollm.FunctionCall, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsFunctionCalls")
	ret0, _ := ret[0].([]gollm.FunctionCall)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// AsFunctionCalls indicates an expected call of AsFunctionCalls.
func (mr *MockPartMockRecorder) AsFunctionCalls() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsFunctionCalls", reflect.TypeOf((*MockPart)(nil).AsFunctionCalls))
}

// AsText mocks base method.
func (m *MockPart) AsText() (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsText")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// AsText indicates an expected call of AsText.
func (mr *MockPartMockRecorder) AsText() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsText", reflect.TypeOf((*MockPart)(nil).AsText))
}
