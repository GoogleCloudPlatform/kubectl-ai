// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/GoogleCloudPlatform/kubectl-ai/pkg/tools (interfaces: Tool)
//
// Generated by this command:
//
//	mockgen -destination=tools_mock.go -package=mocks github.com/GoogleCloudPlatform/kubectl-ai/pkg/tools Tool
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gollm "github.com/GoogleCloudPlatform/kubectl-ai/gollm"
	gomock "go.uber.org/mock/gomock"
)

// MockTool is a mock of Tool interface.
type MockTool struct {
	ctrl     *gomock.Controller
	recorder *MockToolMockRecorder
	isgomock struct{}
}

// MockToolMockRecorder is the mock recorder for MockTool.
type MockToolMockRecorder struct {
	mock *MockTool
}

// NewMockTool creates a new mock instance.
func NewMockTool(ctrl *gomock.Controller) *MockTool {
	mock := &MockTool{ctrl: ctrl}
	mock.recorder = &MockToolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTool) EXPECT() *MockToolMockRecorder {
	return m.recorder
}

// CheckModifiesResource mocks base method.
func (m *MockTool) CheckModifiesResource(args map[string]any) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckModifiesResource", args)
	ret0, _ := ret[0].(string)
	return ret0
}

// CheckModifiesResource indicates an expected call of CheckModifiesResource.
func (mr *MockToolMockRecorder) CheckModifiesResource(args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckModifiesResource", reflect.TypeOf((*MockTool)(nil).CheckModifiesResource), args)
}

// Description mocks base method.
func (m *MockTool) Description() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Description")
	ret0, _ := ret[0].(string)
	return ret0
}

// Description indicates an expected call of Description.
func (mr *MockToolMockRecorder) Description() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Description", reflect.TypeOf((*MockTool)(nil).Description))
}

// FunctionDefinition mocks base method.
func (m *MockTool) FunctionDefinition() *gollm.FunctionDefinition {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FunctionDefinition")
	ret0, _ := ret[0].(*gollm.FunctionDefinition)
	return ret0
}

// FunctionDefinition indicates an expected call of FunctionDefinition.
func (mr *MockToolMockRecorder) FunctionDefinition() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FunctionDefinition", reflect.TypeOf((*MockTool)(nil).FunctionDefinition))
}

// IsInteractive mocks base method.
func (m *MockTool) IsInteractive(args map[string]any) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsInteractive", args)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsInteractive indicates an expected call of IsInteractive.
func (mr *MockToolMockRecorder) IsInteractive(args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsInteractive", reflect.TypeOf((*MockTool)(nil).IsInteractive), args)
}

// Name mocks base method.
func (m *MockTool) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockToolMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockTool)(nil).Name))
}

// Run mocks base method.
func (m *MockTool) Run(ctx context.Context, args map[string]any) (any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx, args)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockToolMockRecorder) Run(ctx, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockTool)(nil).Run), ctx, args)
}
