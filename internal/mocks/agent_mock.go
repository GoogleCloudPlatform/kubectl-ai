// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/GoogleCloudPlatform/kubectl-ai/pkg/api (interfaces: ChatMessageStore)
//
// Generated by this command:
//
//	mockgen -destination=agent_mock.go -package=mocks github.com/GoogleCloudPlatform/kubectl-ai/pkg/api ChatMessageStore
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	api "github.com/GoogleCloudPlatform/kubectl-ai/pkg/api"
	gomock "go.uber.org/mock/gomock"
)

// MockChatMessageStore is a mock of ChatMessageStore interface.
type MockChatMessageStore struct {
	ctrl     *gomock.Controller
	recorder *MockChatMessageStoreMockRecorder
	isgomock struct{}
}

// MockChatMessageStoreMockRecorder is the mock recorder for MockChatMessageStore.
type MockChatMessageStoreMockRecorder struct {
	mock *MockChatMessageStore
}

// NewMockChatMessageStore creates a new mock instance.
func NewMockChatMessageStore(ctrl *gomock.Controller) *MockChatMessageStore {
	mock := &MockChatMessageStore{ctrl: ctrl}
	mock.recorder = &MockChatMessageStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChatMessageStore) EXPECT() *MockChatMessageStoreMockRecorder {
	return m.recorder
}

// AddChatMessage mocks base method.
func (m *MockChatMessageStore) AddChatMessage(record *api.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddChatMessage", record)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddChatMessage indicates an expected call of AddChatMessage.
func (mr *MockChatMessageStoreMockRecorder) AddChatMessage(record any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddChatMessage", reflect.TypeOf((*MockChatMessageStore)(nil).AddChatMessage), record)
}

// ChatMessages mocks base method.
func (m *MockChatMessageStore) ChatMessages() []*api.Message {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatMessages")
	ret0, _ := ret[0].([]*api.Message)
	return ret0
}

// ChatMessages indicates an expected call of ChatMessages.
func (mr *MockChatMessageStoreMockRecorder) ChatMessages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatMessages", reflect.TypeOf((*MockChatMessageStore)(nil).ChatMessages))
}

// ClearChatMessages mocks base method.
func (m *MockChatMessageStore) ClearChatMessages() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearChatMessages")
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearChatMessages indicates an expected call of ClearChatMessages.
func (mr *MockChatMessageStoreMockRecorder) ClearChatMessages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearChatMessages", reflect.TypeOf((*MockChatMessageStore)(nil).ClearChatMessages))
}

// SetChatMessages mocks base method.
func (m *MockChatMessageStore) SetChatMessages(newHistory []*api.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetChatMessages", newHistory)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetChatMessages indicates an expected call of SetChatMessages.
func (mr *MockChatMessageStoreMockRecorder) SetChatMessages(newHistory any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetChatMessages", reflect.TypeOf((*MockChatMessageStore)(nil).SetChatMessages), newHistory)
}
